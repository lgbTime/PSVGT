import os
import pandas as pd
def file_capture(dir, suffix):
    captures = []
    all_files = os.listdir(dir)
    for file in all_files:
        if file[-len(suffix):] == suffix:
            captures.append(os.path.join(dir, file))
    return captures

def merge(args):
    file_lists = file_capture(args.dir, '.vcf')
    print(file_lists)
    file_lists.sort()
    vcf = pd.read_csv(file_lists[0],header=0,index_col=None,sep="\t")
    vcf.sort_values(by=["#CHROM","POS"],inplace=True)
    vcf.index = vcf["ID"]
    vcf_gt = vcf[vcf.columns[-1]]
    
    for file_name in file_lists[1:]:
        vcfi = pd.read_csv(file_name,header=0,index_col=None,sep="\t")
        vcfi.sort_values(by=["#CHROM","POS"],inplace=True)
        vcfi.index = vcfi["ID"]
        vcfi_gt = vcfi[vcfi.columns[-1]]
        vcf_gt = pd.concat([vcf_gt, vcfi_gt],axis=1)
    vcf["INFO"] = "."
    vcf_out = pd.concat([vcf[vcf.columns[0:9]],vcf_gt], axis=1)
    print(vcf_out.head())
    vcf_out.to_csv(f"{args.out}",header=True,index=None,sep="\t")
    vcf_out[vcf_out["ALT"].isin(["<DEL>", "<INS>"])].to_csv(f"{args.out}.SVInDel",header=True,index=None,sep="\t")
if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser("merging the population scale SVGT vcf", formatter_class= argparse.ArgumentDefaultsHelpFormatter)
    IN = parser.add_argument_group("Input file ")
    IN.add_argument("-d", dest="dir",required=True, help="a file list all the vcf file path which generated by SVGT")
    IN.add_argument("-o", dest="out",required=True, help="output file merged vcf")
    args  = parser.parse_args()
    merge(args)

